{"version":3,"sources":["util.ts","Home.tsx","reportWebVitals.ts","CreateRoom.tsx","Room.tsx","index.tsx"],"names":["capitalise","word","toUpperCase","slice","Window","prototype","fetchBackend","endpoint","init","location","window","host","hostname","fetch","protocol","then","res","json","Home","props","render","className","to","id","state","rooms","map","room","href","console","log","setState","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","CreateRoom","useForm","defaultValues","time","register","handleSubmit","setValue","useState","categories","setCategories","history","useHistory","onSubmit","data","a","method","headers","body","JSON","stringify","success","push","name","useEffect","category","ref","type","htmlFor","min","max","Room","canvas","colours","brush","socket","io","nick","handleMouseDown","isDrawer","mouse","tool","ctx","beginPath","moveTo","x","y","lineTo","stroke","drawing","emit","floodFill","handleMouseMove","event","rect","current","getBoundingClientRect","clientX","left","clientY","top","clearCanvas","fillStyle","fillRect","width","height","colour","changeTool","forceUpdate","updateCursor","messageInput","key","preventDefault","message","style","background","onClick","changeColour","players","sort","b","points","player","chat","placeholder","value","onChange","target","onKeyPress","formatTime","hint","Word","length","brushSize","lineWidth","disabled","onContextMenu","e","onMouseDown","onMouseMove","choices","choice","createRef","Brush","match","params","this","getContext","drawer","prompt","addMessage","imageSmoothingEnabled","lineJoin","lineCap","document","addEventListener","closePath","on","size","bind","msg","intersection","join","addUserMessage","undefined","words","index","findIndex","splice","user","React","cloneElement","strokeStyle","quotient","Math","floor","remainder","toString","padStart","startX","startY","hex","result","exec","r","parseInt","g","hexToRgb","getImageData","canvasWidth","startPos","startR","startG","startB","newPos","pixelPos","reachLeft","reachRight","pixelStack","pop","matchStartColor","colorPixel","putImageData","pinned","setPinned","hovered","setHovered","useForceUpdate","word_info","useRef","clientHeight","onMouseEnter","onMouseLeave","alt","subtext","src","image","onLoad","game","createElement","arc","PI","fill","cursor","toDataURL","ReactDOM","StrictMode","path","exact","component","getElementById"],"mappings":"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","file":"static/js/main.cbb737cf.chunk.js","sourcesContent":["declare global {\r\n    interface Window {\r\n        fetchBackend(endpoint: String, init?: RequestInit): Promise<any>;\r\n    }\r\n}\r\n\r\nWindow.prototype.fetchBackend = function (endpoint: String, init?: RequestInit): Promise<any> {\r\n    const location = window.location\r\n    const host = location.hostname === \"localhost\" ? `${location.hostname}:8000` : location.hostname\r\n    return fetch(`${location.protocol}//${host}/api${endpoint}`, init)\r\n        .then(res => res.json());\r\n}\r\n\r\nexport type Colour = { r: number; b: number; g: number }\r\n\r\nexport function capitalise(word: string) {\r\n    return (word[0]?.toUpperCase() ?? \"\") + word.slice(1)\r\n}\r\n\r\nexport function hexToRgb(hex: string): Colour | undefined {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16)\r\n    } : undefined;\r\n}\r\n","import React, {Component} from 'react';\nimport './util';\nimport './App.css';\nimport {Link} from 'react-router-dom';\n\nclass Home extends Component<{}, { rooms: string[] }> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {rooms: []}\n    }\n\n\n    componentDidMount() {\n        window.fetchBackend(\"/rooms\").then(json => {\n            console.log(json)\n            this.setState({\n                rooms: json\n            })\n        })\n    }\n\n    render = () => (\n        <div className=\"App\">\n            <Link to=\"/create-room\">\n                <button>Create Room</button>\n            </Link>\n\n            <ul id=\"rooms\">\n                {this.state.rooms.map(room => {\n                    return <li key={room} className=\"room\"><a href={ `/room/${room}` }>{room}</a></li>\n                })}\n            </ul>\n        </div>\n    );\n}\n\nexport default Home;\n","import {ReportHandler} from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {useEffect, useState} from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport \"./util\"\r\nimport {capitalise} from \"./util\";\r\n\r\nfunction CreateRoom() {\r\n    const {register, handleSubmit, setValue} = useForm({\r\n        defaultValues: {\r\n            time: 180\r\n        }\r\n    })\r\n    const [categories, setCategories] = useState([] as string[])\r\n    const history = useHistory()\r\n\r\n    const onSubmit = async (data: any) => {\r\n        //data.preventDefault()\r\n        const {success} = await window.fetchBackend(\"/create-room\", {\r\n            method: \"post\",\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n        history.push(success ? `/room/${data.name}` : \"/\")\r\n    }\r\n    useEffect(() => {\r\n        window.fetchBackend(\"/categories\").then(json => {\r\n            setCategories(json)\r\n            for (const category of json as string[]) {\r\n                // @ts-ignore\r\n                setValue(category, true)\r\n            }\r\n        })\r\n    }, [setValue])\r\n\r\n    return (\r\n        <div id=\"App\">\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <input key=\"name\" ref={register} type=\"text\" name=\"name\"/>\r\n                <br/>\r\n                {categories.map(category =>\r\n                    <label key={category} htmlFor={category}>\r\n                        {capitalise(category)}:\r\n                        <input ref={register} type=\"checkbox\" name={category}/><br/>\r\n                    </label>,\r\n                )}\r\n                <input key=\"time\" ref={register} type=\"number\" name=\"time\" min=\"60\" max=\"300\"/>\r\n                <input type=\"submit\"/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateRoom","import React, {\r\n    Component,\r\n    createRef,\r\n    KeyboardEvent,\r\n    MouseEvent,\r\n    RefObject,\r\n    useRef,\r\n    useState\r\n} from \"react\"\r\nimport {io} from \"socket.io-client\";\r\nimport \"./style.css\"\r\nimport {capitalise, hexToRgb} from \"./util\";\r\n\r\ninterface RoomProps {\r\n    match: {\r\n        params: {\r\n            room: string\r\n        }\r\n    }\r\n}\r\n\r\ninterface Mouse {\r\n    x: number,\r\n    y: number\r\n}\r\n\r\ninterface Hint {\r\n    category: string,\r\n    word: string\r\n}\r\n\r\ninterface RoomState {\r\n    drawing: boolean,\r\n    mouse: Mouse,\r\n    drawer?: string,\r\n    brushSize: number,\r\n    chat: JSX.Element[],\r\n    message: string\r\n    time: number,\r\n    word?: WordData,\r\n    choices?: [WordChoice, WordChoice, WordChoice],\r\n    players: Player[],\r\n    hint?: Hint\r\n}\r\n\r\ninterface WordData {\r\n    word: string,\r\n    image: string\r\n    category: string,\r\n    subtext: string\r\n}\r\n\r\ninterface Player {\r\n    id: string,\r\n    name: string,\r\n    points: number\r\n}\r\n\r\ninterface WordChoice {\r\n    id: string,\r\n    word: string,\r\n    category: string\r\n}\r\n\r\nclass Room extends Component<RoomProps, RoomState> {\r\n    private readonly canvas: RefObject<HTMLCanvasElement>;\r\n    private readonly room: string;\r\n    private colours: string[];\r\n    private brush: Brush\r\n    // @ts-ignore\r\n    private readonly socket = io(`ws://${window.location.hostname}:8000`, {\"sync disconnect on unload\": true});\r\n    private nick: string | null = null;\r\n\r\n    get ctx(): CanvasRenderingContext2D {\r\n        return this.canvas.current!.getContext(\"2d\")!;\r\n    }\r\n\r\n    get isDrawer(): boolean {\r\n        return this.state.drawer === this.socket.id\r\n    }\r\n\r\n    constructor(props: RoomProps) {\r\n        super(props)\r\n        this.state = {\r\n            drawing: false,\r\n            mouse: {x: 0, y: 0},\r\n            brushSize: 10,\r\n            chat: [],\r\n            message: \"\",\r\n            time: 0,\r\n            players: []\r\n        }\r\n        this.canvas = createRef()\r\n        this.brush = new Brush(this.canvas)\r\n        this.room = props.match.params.room\r\n\r\n        this.colours = [\"A90F00\", \"FF1800\", \"ED7000\", \"FFA400\", \"FFF000\", \"A0EB39\", \"006B00\", \"AAD4E9\", \"2074DD\", \"000EFF\", \"E721DF\", \"75106F\", \"FFE1AC\", \"63400C\", \"412D07\", \"979697\", \"686769\", \"464446\", \"010001\", \"ffffff\"]\r\n            .map(colour => \"#\" + colour)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const socket = this.socket\r\n        this.nick = null;\r\n        while ((this.nick = prompt(\"Nickname\")) === null) {\r\n        }\r\n\r\n        socket.emit(\"join\", this.room, this.nick);\r\n        this.addMessage(<div className=\"message reveal\">{this.nick} has joined the room.</div>)\r\n        const rect = this.canvas.current!.getBoundingClientRect();\r\n        this.ctx.canvas.width = rect.width;\r\n        this.ctx.canvas.height = rect.height;\r\n        this.ctx.imageSmoothingEnabled = false\r\n        this.ctx.fillStyle = \"#ffffff\"\r\n        this.clearCanvas()\r\n        this.ctx.lineWidth = 10;\r\n        this.ctx.lineJoin = \"round\";\r\n        this.ctx.lineCap = \"round\";\r\n        this.changeColour(\"#010001\");\r\n\r\n        document.addEventListener(\"mouseup\", () => {\r\n            if (this.state.drawing) {\r\n                this.ctx.closePath()\r\n                this.setState({drawing: false})\r\n                this.socket.emit(\"mouse_up\", this.state.mouse)\r\n            }\r\n        })\r\n\r\n        socket.on(\"brush_size\", (size: number) => this.ctx.lineWidth = size)\r\n\r\n        socket.on(\"mouse_down\", (mouse: Mouse) => {\r\n            this.ctx.beginPath();\r\n            this.ctx.moveTo(mouse.x + 0.5, mouse.y + 0.5);\r\n            this.ctx.lineTo(mouse.x + 0.5, mouse.y + 0.5);\r\n            this.ctx.stroke();\r\n        });\r\n\r\n        socket.on(\"mouse_move\", (mouse: Mouse) => {\r\n            this.ctx.lineTo(mouse.x + 0.5, mouse.y + 0.5);\r\n            this.ctx.stroke();\r\n        });\r\n\r\n        socket.on(\"mouse_up\", (mouse: Mouse) => {\r\n            this.ctx.closePath();\r\n            this.ctx.moveTo(mouse.x + 0.5, mouse.y + 0.5);\r\n        });\r\n\r\n        socket.on(\"clear_canvas\", this.clearCanvas);\r\n\r\n        socket.on(\"colour\", this.changeColour.bind(this));\r\n\r\n        socket.on(\"fill\", (mouse: Mouse) => this.floodFill(mouse.x, mouse.y))\r\n\r\n        socket.on(\"guessed\", (player: string) => {\r\n            this.addMessage(<div className=\"message guessed\">{player} guessed the word!</div>);\r\n        });\r\n\r\n        socket.on(\"close\", (msg: string) => {\r\n            this.addMessage(<div className=\"message close\">\"{msg}\" is 1 letter off!</div>)\r\n        })\r\n\r\n        socket.on(\"contains\", (intersection: Array<string>) => {\r\n            this.addMessage(<div className=\"message close\">\r\n                You have found the following words: {intersection.join(\",\")}\r\n            </div>);\r\n        })\r\n\r\n        socket.on(\"chat_message\", this.addUserMessage.bind(this))\r\n\r\n        socket.on(\"round_start\", (drawer: string, time: number) => {\r\n            this.setState({drawer, time})\r\n        })\r\n\r\n        socket.on(\"round\", (hint: Hint) => {\r\n            this.clearCanvas();\r\n            this.setState({\r\n                hint,\r\n            })\r\n            // $(\"#hint .category\").text(capitalise(hint.category));\r\n            // $(\"#hint .word\").text(hint.word);\r\n        })\r\n\r\n        socket.on(\"round_end\", (word: string) => {\r\n            // $(\"#topbar #to-draw\").remove();\r\n            this.setState({\r\n                drawing: false,\r\n                drawer: undefined,\r\n                word: undefined,\r\n                hint: undefined\r\n            })\r\n            this.addMessage(<div className=\"message reveal\">The word was {word}.</div>)\r\n        })\r\n        socket.on(\"choose\", (words: [WordChoice, WordChoice, WordChoice]) => {\r\n            this.setState({choices: words})\r\n            // $(\".choice\").click(function () {\r\n            //     socket.emit(\"choice\", {id: this.id, category: this.getAttribute(\"data-category\")});\r\n            // })\r\n        })\r\n\r\n        socket.on(\"drawer\", (word: WordData) => {\r\n            this.setState({\r\n                word: word,\r\n                choices: undefined\r\n            })\r\n        })\r\n\r\n        socket.on(\"join\", (player: Player) => {\r\n            this.setState({\r\n                players: [...this.state.players, player]\r\n            })\r\n            this.addMessage(<div className=\"message reveal\">{player.name} has joined the\r\n                room.</div>)\r\n            console.log(this.state.players)\r\n        });\r\n\r\n        socket.on(\"players\", (players: Player[]) => {\r\n            this.setState({players})\r\n        })\r\n\r\n        socket.on(\"leave\", (id: string) => {\r\n            const players = [...this.state.players]\r\n            const index = players.findIndex(player => player.id === id)\r\n            const player = players.splice(index, 1)[0]\r\n            this.addMessage(<div className=\"message reveal\">{player.name} has left the room.</div>)\r\n            this.setState({\r\n                players: players\r\n            })\r\n        })\r\n\r\n        socket.on(\"time\", (time: number) => this.setState({time}))\r\n    }\r\n\r\n    addUserMessage(user: string, message: string) {\r\n        this.addMessage(<div className=\"message\"><strong>{user}</strong>: {message}</div>)\r\n    }\r\n\r\n    addMessage(message: JSX.Element) {\r\n        message = React.cloneElement(message, {key: this.state.chat.length})\r\n        this.setState({\r\n            chat: [message, ...this.state.chat]\r\n        })\r\n    }\r\n\r\n\r\n    changeColour(colour: string) {\r\n        this.ctx.strokeStyle = this.ctx.fillStyle = colour;\r\n        // this.brush.colour = hexToRgb(colour)!;\r\n        this.brush.colour = colour\r\n        this.brush.updateCursor()\r\n        this.forceUpdate()\r\n        this.socket.emit(\"colour\", colour)\r\n    }\r\n\r\n    handleMouseDown = () => {\r\n        if (this.isDrawer) {\r\n            const mouse = this.state.mouse\r\n            if (this.brush.tool === \"paint\") {\r\n                this.ctx.beginPath();\r\n                this.ctx.moveTo(mouse.x + 0.5, mouse.y + 0.5);\r\n                this.ctx.lineTo(mouse.x + 0.5, mouse.y + 0.5);\r\n                this.ctx.stroke();\r\n                this.setState({drawing: true})\r\n                this.socket.emit(\"mouse_down\", mouse)\r\n            }\r\n            else {\r\n                this.floodFill(mouse.x, mouse.y)\r\n                this.socket.emit(\"fill\", mouse);\r\n            }\r\n        }\r\n    }\r\n\r\n    handleMouseMove = (event: MouseEvent) => {\r\n        const mouse = {x: 0, y: 0}\r\n        const rect = this.canvas.current!.getBoundingClientRect()\r\n        mouse.x = event.clientX - rect.left;\r\n        mouse.y = event.clientY - rect.top;\r\n        this.setState({mouse})\r\n        if (this.state.drawing) {\r\n            this.ctx.lineTo(mouse.x + 0.5, mouse.y + 0.5);\r\n            this.ctx.stroke();\r\n            this.socket.emit(\"mouse_move\", mouse);\r\n        }\r\n    }\r\n\r\n    clearCanvas = () => {\r\n        this.ctx.fillStyle = \"#fff\"\r\n        this.ctx.fillRect(0, 0, this.canvas.current!.width, this.canvas.current!.height)\r\n        this.ctx.fillStyle = this.brush.colour\r\n        this.socket.emit(\"clear_canvas\")\r\n    }\r\n\r\n    changeTool = (tool: BrushTool) => {\r\n        this.brush.tool = tool\r\n        this.forceUpdate()\r\n        this.brush.updateCursor()\r\n    }\r\n\r\n    messageInput = (event: KeyboardEvent) => {\r\n        if (event.key === \"Enter\") {\r\n            event.preventDefault()\r\n            this.socket.emit(\"chat_message\", this.state.message)\r\n            this.setState({message: \"\"})\r\n        }\r\n    }\r\n\r\n    formatTime(time: number): string {\r\n        const quotient = Math.floor(time / 60)\r\n        const remainder = (time % 60).toString().padStart(2, \"0\")\r\n        return `${quotient}:${remainder}`\r\n    }\r\n\r\n    render = (() => {\r\n        console.log(this.brush.colour)\r\n        const colours = this.colours.map(colour =>\r\n            <td key={colour} className={\"colour\" + (this.brush.colour === colour ? \" active\" : \"\")}\r\n                style={{background: colour}}\r\n                onClick={() => this.changeColour(colour)}>\r\n            </td>\r\n        )\r\n        return (\r\n            <div className=\"App Room\">\r\n                <div id=\"chat\">\r\n                    <ul id=\"players\">\r\n                        {this.state.players.sort((a, b) => b.points - a.points)\r\n                            .map(player =>\r\n                                <li key={player.id} id={player.id} className=\"player\">\r\n                                    <span className=\"player-icon material-icons\">person</span>\r\n                                    <div className=\"player-name\">{player.name}</div>\r\n                                    <div className=\"player-points\">{player.points}</div>\r\n                                </li>\r\n                            )\r\n                        }\r\n                    </ul>\r\n                    <div id=\"messages\">{this.state.chat}</div>\r\n                    <div id=\"message-input\">\r\n                        <div className=\"button\">\r\n                            <button><span className=\"material-icons\">send</span></button>\r\n                        </div>\r\n                        <div className=\"input\">\r\n                            <input type=\"text\"\r\n                                   placeholder=\"Make a guess\"\r\n                                   value={this.state.message}\r\n                                   onChange={event => this.setState({message: event.target.value})}\r\n                                   onKeyPress={this.messageInput}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"topbar\">\r\n                    <div id=\"timer\">\r\n                        {this.formatTime(this.state.time)}\r\n                    </div>\r\n                    <div id=\"hint\">\r\n                        <div\r\n                            className=\"category\">{capitalise(this.state.hint?.category ?? \"\")}</div>\r\n                        <pre className=\"word\">{this.state.hint?.word ?? \"\"}</pre>\r\n                    </div>\r\n                    {this.state.word &&\r\n                    <Word {...this.state.word}/>\r\n                    }\r\n                </div>\r\n                <div id=\"brush\">\r\n                    <table id=\"colours\">\r\n                        <tbody>\r\n                        <tr>\r\n                            {colours.slice(0, this.colours.length / 2)}\r\n                        </tr>\r\n                        <tr>\r\n                            {colours.slice(this.colours.length / 2)}\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <div id=\"size\">\r\n                        <div className=\"inner\">\r\n                            <label htmlFor=\"size-input\">Size</label>\r\n                            <input id=\"size-input\" name=\"size-input\" type=\"range\" min=\"5\" max=\"50\"\r\n                                   value={this.state.brushSize}\r\n                                   onChange={event => {\r\n                                       const value = +event.target!.value\r\n                                       this.ctx.lineWidth = value;\r\n                                       this.setState({brushSize: value})\r\n                                       this.socket.emit(\"brush_size\", value)\r\n                                   }}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <button\r\n                        className={\"tool-button icon-button\" + (this.brush.tool === \"paint\" ? \" active\" : \"\")}\r\n                        onClick={() => this.changeTool(\"paint\")}\r\n                        disabled={this.brush.tool === \"paint\"}>\r\n                        <span className=\"material-icons\">brush</span>\r\n                    </button>\r\n\r\n                    <button\r\n                        className={\"tool-button icon-button\" + (this.brush.tool === \"fill\" ? \" active\" : \"\")}\r\n                        onClick={() => this.changeTool(\"fill\")}\r\n                        disabled={this.brush.tool === \"fill\"}>\r\n                        <span className=\"material-icons\">format_paint</span>\r\n                    </button>\r\n\r\n                    <button className=\"icon-button\" onClick={() => {\r\n                        if (this.isDrawer) this.clearCanvas()\r\n                    }}>\r\n                        <span className=\"material-icons\">delete</span>\r\n                    </button>\r\n                </div>\r\n                <div id=\"game\">\r\n                    <canvas id=\"canvasGame\" ref={this.canvas}\r\n                            onContextMenu={e => e.preventDefault()}\r\n                            onMouseDown={this.handleMouseDown}\r\n                            onMouseMove={this.handleMouseMove}>\r\n                        HTML Canvas isn't supported on your browser.\r\n                    </canvas>\r\n                    {this.state.choices &&\r\n                    <div id=\"choices\">\r\n                        {this.state.choices.map(choice =>\r\n                            <button className=\"choice\" key={choice.id}\r\n                                    onClick={() => {\r\n                                        this.socket.emit(\"choice\", {\r\n                                            id: choice.id,\r\n                                            category: choice.category\r\n                                        })\r\n                                    }}>\r\n                                {choice.word}\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    floodFill(startX: number, startY: number) {\r\n        const colour = hexToRgb(this.brush.colour)!\r\n        const colours = this.ctx.getImageData(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\r\n        const canvasWidth = this.canvas.current!.width;\r\n\r\n        const startPos = (startY * canvasWidth + startX) * 4,\r\n            startR = colours.data[startPos],\r\n            startG = colours.data[startPos + 1],\r\n            startB = colours.data[startPos + 2]\r\n        if (startR === colour.r && startG === colour.g && startB === colour.b) {\r\n            // Return because trying to fill with the same color\r\n            return;\r\n        }\r\n        let newPos,\r\n            x,\r\n            y,\r\n            pixelPos,\r\n            reachLeft,\r\n            reachRight,\r\n            pixelStack = [[startX, startY]];\r\n        while (pixelStack.length) {\r\n\r\n            newPos = pixelStack.pop()!;\r\n            x = newPos[0];\r\n            y = newPos[1];\r\n\r\n            // Get current pixel position\r\n            pixelPos = (y * canvasWidth + x) * 4;\r\n\r\n            // Go up as long as the color matches and are inside the canvas\r\n            while (y >= 0 && this.matchStartColor(colours, pixelPos, startR, startG, startB)) {\r\n                y -= 1;\r\n                pixelPos -= canvasWidth * 4;\r\n            }\r\n\r\n            pixelPos += canvasWidth * 4;\r\n            y += 1;\r\n            reachLeft = false;\r\n            reachRight = false;\r\n\r\n            // Go down as long as the color matches and in inside the canvas\r\n            while (y <= this.canvas.current!.height && this.matchStartColor(colours, pixelPos, startR, startG, startB)) {\r\n                y += 1;\r\n\r\n                this.colorPixel(colours, pixelPos, colour.r, colour.g, colour.b);\r\n                if (x > 0) {\r\n                    if (this.matchStartColor(colours, pixelPos - 4, startR, startG, startB)) {\r\n                        if (!reachLeft) {\r\n                            // Add pixel to stack\r\n                            pixelStack.push([x - 1, y]);\r\n                            reachLeft = true;\r\n                        }\r\n                    }\r\n                    else if (reachLeft) {\r\n                        reachLeft = false;\r\n                    }\r\n                }\r\n\r\n                if (x < canvasWidth) {\r\n                    if (this.matchStartColor(colours, pixelPos + 4, startR, startG, startB)) {\r\n                        if (!reachRight) {\r\n                            // Add pixel to stack\r\n                            pixelStack.push([x + 1, y]);\r\n                            reachRight = true;\r\n                        }\r\n                    }\r\n                    else if (reachRight) {\r\n                        reachRight = false;\r\n                    }\r\n                }\r\n\r\n                pixelPos += canvasWidth * 4;\r\n            }\r\n        }\r\n\r\n        this.ctx.putImageData(colours, 0, 0);\r\n    }\r\n\r\n    colorPixel(colours: ImageData, pixelPos: number, r: number, g: number, b: number, a?: number) {\r\n        colours.data[pixelPos] = r;\r\n        colours.data[pixelPos + 1] = g;\r\n        colours.data[pixelPos + 2] = b;\r\n        colours.data[pixelPos + 3] = a ?? 255;\r\n    }\r\n\r\n    matchStartColor(colours: ImageData, pixelPos: number, startR: number, startG: number, startB: number) {\r\n        const r = colours.data[pixelPos];\r\n        const g = colours.data[pixelPos + 1];\r\n        const b = colours.data[pixelPos + 2];\r\n\r\n        // If the current pixel matches the clicked color\r\n        return r === startR && g === startG && b === startB\r\n    }\r\n}\r\n\r\nfunction useForceUpdate() {\r\n    const setValue = useState(0)[1];\r\n    return () => setValue(value => ++value); // update the state to force render\r\n}\r\n\r\n\r\nfunction Word(props: WordData) {\r\n    const [pinned, setPinned] = useState(false)\r\n    const [hovered, setHovered] = useState(false)\r\n    const forceUpdate = useForceUpdate()\r\n    const word_info = useRef<HTMLDivElement>(null)\r\n    const height = word_info.current?.clientHeight ?? 0\r\n\r\n    return (\r\n        <div id=\"to-draw\" style={{height: (hovered ? height : 0) + 100 + \"px\"}}\r\n             onMouseEnter={() => {\r\n                 setHovered(true)\r\n             }}\r\n             onMouseLeave={() => {\r\n                 if (!pinned) {\r\n                     setHovered(false)\r\n                 }\r\n             }}>\r\n            <div id=\"word\">\r\n                <span>{props.word}</span>\r\n            </div>\r\n            <div id=\"word-info\" ref={word_info}>\r\n                <img alt={props.subtext} src={props.image} onLoad={() => forceUpdate()}/>\r\n                <span id=\"category\">{capitalise(props.category)}</span>\r\n                <div id=\"subtext\">{props.subtext}</div>\r\n                <button id=\"pin\" className={pinned ? \"on\" : \"\"}\r\n                        onClick={() => {\r\n                            setPinned(!pinned)\r\n                        }}>\r\n                    <span className=\"material-icons\">push_pin</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype BrushTool = \"paint\" | \"fill\"\r\n\r\nclass Brush {\r\n    canvas = document.createElement(\"canvas\");\r\n    ctx = this.canvas.getContext(\"2d\")!;\r\n    tool = \"paint\" as BrushTool\r\n    colour = \"#010001\"\r\n\r\n    constructor(readonly game: RefObject<HTMLCanvasElement>) {\r\n        this.canvas.width = this.canvas.height = 40;\r\n    }\r\n\r\n    updateCursor() {\r\n        switch (this.tool) {\r\n            case \"paint\":\r\n                this.ctx.fillStyle = this.colour;\r\n                this.ctx.lineWidth = 3;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(20 + 0.5, 20 + 0.5, 10, 0, 2 * Math.PI);\r\n                this.ctx.fill();\r\n\r\n                this.ctx.strokeStyle = \"#fff\";\r\n                this.ctx.lineWidth = 1;\r\n                this.ctx.beginPath();\r\n                this.ctx.arc(20 + 0.5, 20 + 0.5, 9, 0, 2 * Math.PI);\r\n                this.ctx.stroke();\r\n\r\n                this.game.current!.style.cursor = `url(${this.canvas.toDataURL()}) 20 20, default`;\r\n                break;\r\n            case \"fill\":\r\n                this.game.current!.style.cursor = 'url(\"/images/fill.png\") 20 20, default'\r\n        }\r\n    }\r\n}\r\n\r\nexport default Room","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport './index.css';\nimport Home from './Home';\nimport reportWebVitals from './reportWebVitals';\nimport CreateRoom from './CreateRoom';\nimport Room from './Room';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Switch>\n                <Route path=\"/\" exact={true}>\n                    <Home />\n                </Route>\n                <Route path=\"/create-room\">\n                    <CreateRoom />\n                </Route>\n                <Route path=\"/room/:room\" component={Room}></Route>\n            </Switch>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}